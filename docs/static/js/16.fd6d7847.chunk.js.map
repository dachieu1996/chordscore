{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","components/SectionMenu.ts","components/SectionGrid.tsx","assets/select-arrow-icon.svg","assets/icons/filter.svg","components/Filter.ts","components/ChartSelect.tsx","pages/Chart.tsx"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","SectionMenu","styled","button","active","css","Container","div","checked","AbsoluteBox","SmallRank","Rank","span","InfoWrap","Title","Artist","LeftWrap","RightWrap","Button","isOpacityDisabled","SectionGrid","id","deleteId","className","image","title","artist","rank","screenWidth","onClick","visibleChecked","isPlaylist","onUpdate","history","useHistory","isSmallScreen","useState","setPlaylists","isOpenPlaylistModal","setIsOpenPlaylistModal","PlayListIcon","require","default","CheckedIcon","RemoveIcon","onRemoveItem","e","stopPropagation","api","delete","useEffect","getPlaylist","then","playlists","auth","getToken","React","SelectArrowIcon","props","createElement","defaultProps","module","exports","Filter","Filters","FilterContainer","FilterTitle","FilterContents","FilterRow","TopFilterRow","FilterRowTitle","FilterRowCheckbox","Checkbox","SelectedBox","isOpen","Value","ArrowIconWrap","OptionsContainer","Option","ChartSelect","options","onChange","placeholder","setIsOpen","visibleValue","setVisibleValue","map","option","prevState","StyledInput","Input","FilterBackground","FilterHeader","FilterContentWrapper","StyledBottomContents","BottomContentsScore","Chart","useWindowSize","width","isChecked","setIsChecked","ageFilter","setAgeFilter","categories","setCategories","allYears","setAllYears","yearsFilter","setYearsFilter","allFilter","setAllFilter","setFilter","chartData","setChartData","type","setType","checkedSongs","setCheckedSongs","isNewPlaylist","setIsNewPlaylist","newPlaylistName","setNewPlaylistName","isFilterOpen","setIsFilterOpen","checkedFilter","category","sub_category","includes","handleCheckSongRow","song","temp","splice","indexOf","fetchData","useCallback","a","genres","get","params","years","toString","age","charts","data","fetchFilterData","changeYearsFilter","year","prevYear","concat","renderFilterContent","styleType","handleChangeCategoryFilter","TextHeader","index","singer","image_url","SongRow","Modal","open","onClose","firstButtonLabel","onClickFirstButton","makeNewPlaylist","secondButtonLabel","onClickSecondButton","content","icon","playlist","name","count","total_count","savePlaylist","TitleWithBack"],"mappings":"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","file":"static/js/16.fd6d7847.chunk.js","sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import styled from '@emotion/styled';\nimport css from '@emotion/css';\n\nconst SectionMenu = styled.button<{ active: boolean }>`\n  outline: 0;\n  padding: 0;\n  border: 0;\n  background: none;\n  font-size: 14px;\n  font-weight: 500;\n  line-height: 1.29;\n  text-align: right;\n  margin-left: 50px;\n  cursor: pointer;\n  ${({ active }) =>\n    active\n      ? css`\n          color: #0a62ba !important;\n        `\n      : css`\n          color: #1e1e1e;\n          opacity: 0.5;\n          html[color-mode='dark'] & {\n            color: white;\n          }\n        `}\n  @media screen and (max-width: 960px) {\n    margin-left: 35px;\n  }\n\n  @media screen and (max-width: 700px) {\n    margin-left: 15px;\n  }\n\n  @media screen and (max-width: 500px) {\n    margin-left: 30px;\n\n    &:first-of-type {\n      margin-left: 0px;\n    }\n    ${({ active }) =>\n      active\n        ? css`\n            color: #1e1e1e;\n            html[color-mode='dark'] & {\n              color: white;\n            }\n          `\n        : css`\n            color: #1e1e1e;\n            opacity: 0.5;\n            html[color-mode='dark'] & {\n              color: white;\n            }\n          `}\n  }\n`;\n\nexport default SectionMenu;\n","import React, { useEffect, useState } from 'react';\nimport css from '@emotion/css';\nimport styled from '@emotion/styled';\n\nimport { useHistory } from 'react-router';\nimport { api } from '../utils/api';\nimport { getPlaylist } from '../utils/playlist';\nimport { IPlaylist } from '../types';\nimport auth from '../utils/auth';\n\ninterface IPropsForChart {\n  checked?: boolean;\n  onClick?: () => void;\n}\n\ninterface IProps extends IPropsForChart {\n  id: number;\n  deleteId?: number;\n  className?: string;\n  image: string;\n  title: string;\n  artist: string;\n  rank?: string | number;\n  screenWidth?: number;\n  visibleChecked?: boolean;\n  isPlaylist?: boolean;\n  onUpdate?: () => void;\n}\n\nconst SectionGrid = ({\n  id,\n  deleteId,\n  image,\n  className,\n  title,\n  artist,\n  rank,\n  screenWidth = 1980,\n  checked = false,\n  onClick,\n  visibleChecked = false,\n  isPlaylist = false,\n  onUpdate,\n}: IProps) => {\n  const history = useHistory();\n  const isSmallScreen = screenWidth <= 700;\n  // eslint-disable-next-line\n  const [playlists, setPlaylists] = useState<Array<IPlaylist>>([]);\n  const [isOpenPlaylistModal, setIsOpenPlaylistModal] = useState(false);\n  const handleClick = () => history.push(`/notes/${id}`);\n\n  const PlayListIcon = require(`../assets/songrow-icon-1.svg`).default;\n  const CheckedIcon = require(`../assets/songrow-icon-check${\n    checked ? 'ed' : ''\n  }.svg`);\n  const RemoveIcon = require(`../assets/icons/remove.svg`);\n\n  const onRemoveItem = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    api.delete(`/playlist/chord/delete?chord_ids=${deleteId}`);\n    if (onUpdate) {\n      onUpdate();\n    }\n  };\n\n  useEffect(() => {\n    if (isOpenPlaylistModal) {\n      getPlaylist().then((playlists) => setPlaylists(playlists));\n    }\n  }, [isOpenPlaylistModal]);\n\n  return (\n    <Container\n      className={className || ''}\n      checked={checked}\n      onClick={onClick || handleClick}\n    >\n      {rank && isSmallScreen && <SmallRank>{rank}</SmallRank>}\n      {/* {image ? (\n        <Image src={image} onLoad={() => setIsLoaded(true)} />\n      ) : (\n        <DefaultCoverWrap>\n          <DefaultCover />\n        </DefaultCoverWrap>\n      )} */}\n      <AbsoluteBox>\n        {rank && !isSmallScreen && <Rank>{rank}</Rank>}\n        <InfoWrap>\n          <LeftWrap>\n            <Title>{title}</Title>\n            <Artist>{artist}</Artist>\n          </LeftWrap>\n          <RightWrap>\n            {isSmallScreen ? (\n              <>\n                {visibleChecked ? (\n                  <Button checked={checked}>\n                    <CheckedIcon />\n                  </Button>\n                ) : isPlaylist ? (\n                  <Button isOpacityDisabled onClick={onRemoveItem}>\n                    <RemoveIcon />\n                  </Button>\n                ) : null}\n              </>\n            ) : (\n              <>\n                {isPlaylist ? (\n                  <>\n                    <Button isOpacityDisabled onClick={onRemoveItem}>\n                      <RemoveIcon />\n                    </Button>\n                  </>\n                ) : visibleChecked ? (\n                  <Button checked={checked}>\n                    <CheckedIcon />\n                  </Button>\n                ) : (\n                  <>\n                    <Button\n                      onClick={(e: React.MouseEvent) => {\n                        e.stopPropagation();\n                        auth.getToken()\n                          ? setIsOpenPlaylistModal(true)\n                          : history.push('/playlist');\n                      }}\n                    >\n                      <PlayListIcon />\n                    </Button>\n                  </>\n                )}\n              </>\n            )}\n          </RightWrap>\n        </InfoWrap>\n      </AbsoluteBox>\n    </Container>\n  );\n};\n\nconst Container = styled.div<IPropsForChart>`\n  border: 1px solid transparent;\n  border-radius: 5px;\n  overflow: hidden;\n  position: relative;\n  margin-right: 18px;\n  background-color: #ffffff;\n  cursor: inherit;\n\n  @media screen and (max-width: 960px) {\n    margin-right: 13px;\n    width: calc(20% - 13px);\n\n    &:nth-of-type(-n + 5) {\n      margin-bottom: 14px;\n    }\n  }\n\n  @media screen and (max-width: 700px) {\n    display: flex;\n    justify-content: flex-start;\n    width: 100%;\n    height: 60px;\n    padding: 11px 15px 10px 10px;\n    align-items: center;\n    margin-bottom: 15px;\n    margin-right: 0;\n    background-color: transparent;\n\n    &:nth-of-type(-n + 5) {\n      margin-bottom: 15px;\n    }\n\n    &:last-of-type {\n      margin-bottom: 0;\n    }\n  }\n\n  ${({ checked }) =>\n    checked &&\n    css`\n      border: 1px solid rgba(10, 98, 186, 0.69) !important;\n\n      html[color-mode='dark'] & {\n        background-color: #182b4a !important;\n        border-color: transparent !important;\n      }\n    `};\n`;\n\nconst AbsoluteBox = styled.div`\n  display: flex;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n\n  @media screen and (max-width: 700px) {\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nconst SmallRank = styled.div`\n  display: flex;\n  justify-content: center;\n  min-width: 19px;\n  height: 18px;\n  font-size: 14px;\n  line-height: 1.14;\n  color: #1e1e1e;\n  margin-top: 3px;\n  margin-right: 10px;\n  margin-bottom: auto;\n\n  html[color-mode='dark'] & {\n    color: white;\n  }\n`;\n\n// const Image = styled.img`\n//   width: 100%;\n//   height: 100%;\n\n//   @media screen and (max-width: 700px) {\n//     width: 46px;\n//     height: 46px;\n//     object-fit: contain;\n//     border-radius: 2px;\n//   }\n// `;\n\n// const DefaultCoverWrap = styled.div`\n//   width: 100%;\n//   height: 100%;\n//   background-color: white;\n\n//   @media screen and (max-width: 700px) {\n//     min-width: 46px;\n//     width: 46px;\n//     height: 46px;\n//     object-fit: contain;\n//     border-radius: 2px;\n//   }\n// `;\n\nconst Rank = styled.span`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 41px;\n  height: 41px;\n  background-color: #0a62ba;\n  font-size: 16px;\n  font-weight: bold;\n  color: #ffffff;\n`;\n\nconst InfoWrap = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: space-between;\n  align-items: center;\n  /* display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  width: 100%;\n  height: 68px;\n  padding: 13px 9px;\n  margin-top: auto;\n  background-color: rgba(28, 34, 48, 0.81);\n\n  @media screen and (max-width: 960px) {\n    padding: 6px 7px;\n    height: 50px;\n    justify-content: center;\n  }\n\n  @media screen and (max-width: 700px) {\n    display: flex;\n    padding: 0;\n    height: unset;\n    margin-left: 15px;\n    background-color: transparent;\n  } */\n`;\n\nconst Title = styled.span`\n  width: 100%;\n  color: #ffffff;\n  margin-bottom: 5px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  @media screen and (max-width: 960px) {\n    font-size: 14px;\n    line-height: 1.1;\n  }\n\n  @media screen and (max-width: 700px) {\n    margin-bottom: 3px;\n    color: #1e1e1e;\n    width: 200px;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    html[color-mode='dark'] & {\n      color: white;\n    }\n  }\n`;\n\nconst Artist = styled.span`\n  opacity: 0.5;\n  color: #ffffff;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  @media screen and (max-width: 960px) {\n    font-size: 13px;\n    line-height: 1.1;\n  }\n\n  @media screen and (max-width: 700px) {\n    color: #1e1e1e;\n    opacity: 0.5;\n    html[color-mode='dark'] & {\n      color: white;\n    }\n  }\n`;\n\nconst LeftWrap = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst RightWrap = styled.div`\n  display: flex;\n`;\n\ninterface IButton {\n  checked?: boolean;\n  isOpacityDisabled?: boolean;\n}\nconst Button = styled.button<IButton>`\n  border: 0;\n  padding: 0;\n  outline: 0;\n  background: none;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 37px;\n  height: 37px;\n  background-color: rgba(74, 74, 75, 0.05);\n  border-radius: 6px;\n  margin-right: 30px;\n\n  &:last-of-type {\n    margin-right: 0;\n  }\n\n  html[color-mode='dark'] & {\n    background-color: rgba(216, 216, 216, 0.09);\n\n    & path {\n      /* opacity: ${({ isOpacityDisabled }) =>\n        isOpacityDisabled ? 1 : 0.4} !important; */\n      fill: #ffffff !important;\n    }\n  }\n\n  ${({ checked }) =>\n    checked &&\n    css`\n      background-color: rgba(10, 98, 186, 0.69);\n      html[color-mode='dark'] & {\n        background-color: rgba(10, 10, 11, 0.35);\n        & path {\n          fill: white !important;\n          opacity: 0.53;\n        }\n      }\n    `}\n`;\n\nexport default SectionGrid;\n","var React = require('react');\n\nfunction SelectArrowIcon (props) {\n    return React.createElement(\"svg\",props,React.createElement(\"path\",{\"fill\":\"#3A3A3A\",\"fillRule\":\"evenodd\",\"d\":\"M5 5.714c-.151 0-.302-.06-.417-.182l-.023-.026L.945.942C.811.773.832.522.992.38c.16-.142.397-.12.531.05L5 4.816 8.477.428c.134-.169.372-.19.531-.049.16.142.18.394.047.563L5.429 5.52l-.012.013c-.115.121-.266.182-.417.182\"}));\n}\n\nSelectArrowIcon.defaultProps = {\"width\":\"10\",\"height\":\"6\",\"viewBox\":\"0 0 10 6\"};\n\nmodule.exports = SelectArrowIcon;\n\nSelectArrowIcon.default = SelectArrowIcon;\n","var React = require('react');\n\nfunction Filter (props) {\n    return React.createElement(\"svg\",props,[React.createElement(\"title\",{\"key\":0},\"Clip 2\"),React.createElement(\"defs\",{\"key\":1},React.createElement(\"polygon\",{\"id\":\"path-1\",\"points\":\"0 0 35 0 35 35 0 35\"})),React.createElement(\"g\",{\"id\":\"Symbols\",\"stroke\":\"none\",\"strokeWidth\":\"1\",\"fill\":\"none\",\"fillRule\":\"evenodd\",\"key\":2},React.createElement(\"g\",{\"id\":\"icon/필터\"},[React.createElement(\"mask\",{\"id\":\"mask-2\",\"fill\":\"white\",\"key\":0},React.createElement(\"use\",{\"xlinkHref\":\"#path-1\"})),React.createElement(\"g\",{\"id\":\"Clip-2\",\"key\":1}),React.createElement(\"path\",{\"d\":\"M6,11.5026787 L14.2587883,16.6290219 C14.6766559,16.8884547 14.9319624,17.3529062 14.9319624,17.8540433 L14.9319624,29 L20.030563,27.149742 L20.030563,17.8540433 C20.0303919,17.266019 20.3806682,16.7378503 20.9136975,16.5219488 L29,11.5026787 L29,6 L6,6 L6,11.5026787 Z M13.4784387,32 C12.6964708,32 12.062424,31.3659532 12.062424,30.5839854 L12.062424,18.3546263 L3.68300656,13.2846829 C3.25903553,13.0282516 3,12.5686892 3,12.0731883 L3,4.41584099 C3,3.63387314 3.63387314,3 4.41601461,3 L30.5839854,3 C31.3659532,3 32,3.63387314 32,4.41584099 L32,12.0731883 C32,12.5686892 31.7409645,13.0282516 31.3169934,13.2846829 L22.899554,18.3778909 L22.899554,27.7517826 C22.899554,28.3518005 22.5215913,28.8867124 21.9559494,29.086892 L13.9508486,31.9189212 C13.799108,31.9725686 13.639381,32 13.4784387,32 L13.4784387,32 Z\",\"id\":\"Fill-1\",\"fill\":\"#FFFFFF\",\"mask\":\"url(#mask-2)\",\"key\":2})]))]);\n}\n\nFilter.defaultProps = {\"width\":\"18px\",\"height\":\"18px\",\"viewBox\":\"0 0 35 35\",\"version\":\"1.1\"};\n\nmodule.exports = Filter;\n\nFilter.default = Filter;\n","import styled from '@emotion/styled';\nimport Checkbox from './Checkbox';\n\nexport const Filters = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 76px;\n\n  @media screen and (max-width: 500px) {\n    margin-bottom: 15px;\n  }\n`;\n\nexport const FilterContainer = styled.div`\n  display: flex;\n  width: 100%;\n  border-radius: 7px;\n  border: solid 1px #c3c3c3;\n  background-color: white;\n  margin-bottom: 11px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n\n  html[color-mode='dark'] & {\n    background-color: #1a1e27;\n    border: 0;\n  }\n\n  @media screen and (max-width: 500px) {\n    flex-direction: column;\n  }\n`;\n\nexport const FilterTitle = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 180px;\n  border-right: solid 1px rgba(151, 151, 151, 0.3);\n\n  @media screen and (max-width: 500px) {\n    border-right: 0;\n    border-bottom: solid 1px rgba(151, 151, 151, 0.3);\n    width: auto;\n    padding: 18px 25px;\n    justify-content: space-between;\n    align-items: center;\n  }\n\n  & > span {\n    font-size: 18px;\n    font-weight: 500;\n    text-align: center;\n    color: #1e1e1e;\n\n    html[color-mode='dark'] & {\n      color: white;\n    }\n  }\n\n  & > label {\n    margin-bottom: 0;\n    width: auto;\n  }\n`;\n\nexport const FilterContents = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  padding: 30px 55px;\n  padding-bottom: 20px;\n  box-sizing: content-box;\n\n  @media screen and (max-width: 500px) {\n    padding: 25px 30px;\n    box-sizing: border-box;\n  }\n`;\n\nexport const FilterRow = styled.div`\n  display: flex;\n  width: 100%;\n  margin-bottom: 20px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n\n  @media screen and (max-width: 500px) {\n    &.column {\n      display: flex;\n      flex-direction: column;\n    }\n  }\n`;\n\nexport const TopFilterRow = styled(FilterRow)`\n  flex-wrap: wrap;\n`;\n\nexport const FilterRowTitle = styled.span`\n  min-width: 100px;\n  margin-right: 20px;\n  opacity: 0.7;\n  font-size: 13px;\n  font-weight: bold;\n  color: #0a62ba;\n  white-space: nowrap;\n\n  @media screen and (max-width: 500px) {\n    margin-right: 0;\n    margin-bottom: 15px;\n  }\n`;\n\nexport const FilterRowCheckbox = styled(Checkbox)`\n  /* min-width: 80px; */\n  margin: 0 20px 10px 0;\n\n  @media screen and (max-width: 500px) {\n    width: 50%;\n    margin: 0;\n    margin-bottom: 20px;\n  }\n`;\n","import React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled';\nimport ArrowIcon from '../assets/select-arrow-icon.svg';\nimport css from '@emotion/css';\n\nexport interface ISelect {\n  value: string;\n  options: Array<{ key: string; value: string }>;\n  onChange: (value: string) => void;\n  placeholder: string;\n  className?: string;\n}\n\nconst ChartSelect = (props: ISelect) => {\n  const { value, options, onChange, placeholder, className } = props;\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [visibleValue, setVisibleValue] = useState<string>(placeholder);\n\n  useEffect(() => {\n    options.map((option) => {\n      if (option.value === value) {\n        return setVisibleValue(option.key);\n      }\n      return null;\n    });\n  }, [value, options]);\n\n  return (\n    <Container className={`select-box-${isOpen ? 'opened' : ''} ${className}`}>\n      <SelectedBox\n        isOpen={isOpen}\n        onClick={() => setIsOpen((prevState) => !prevState)}\n      >\n        <Value>{visibleValue}</Value>\n        <ArrowIconWrap>\n          <ArrowIcon />\n        </ArrowIconWrap>\n      </SelectedBox>\n      <OptionsContainer>\n        {options.map((option) => (\n          <Option\n            key={`option-${option.value}`}\n            onClick={() => {\n              setIsOpen(false);\n              return onChange(option.value);\n            }}\n            active={option.value === value}\n          >\n            {option.key}\n          </Option>\n        ))}\n      </OptionsContainer>\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  min-width: 80px;\n  align-items: center;\n  position: relative;\n  user-select: none;\n`;\n\nconst SelectedBox = styled.div<{ isOpen: boolean }>`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  height: 30px;\n  border-radius: 5px;\n  background-color: #e9e9e9;\n  color: #1e1e1e;\n  padding: 5px 15px 5px 10px;\n  cursor: pointer;\n  transition: border-radius 0.1s linear;\n\n  html[color-mode='dark'] & {\n    background-color: #2a2e38;\n  }\n\n  ${({ isOpen }) =>\n    isOpen &&\n    css`\n      border-bottom-left-radius: 0;\n      border-bottom-right-radius: 0;\n      border-bottom: 1px solid rgba(151, 151, 151, 0.11);\n    `}\n`;\n\nconst Value = styled.span`\n  font-size: 14px;\n  font-weight: 500;\n  color: #1e1e1e;\n  margin-right: 15px;\n\n  html[color-mode='dark'] & {\n    color: #ffffff;\n  }\n`;\n\nconst ArrowIconWrap = styled.div`\n  display: flex;\n  align-items: center;\n\n  html[color-mode='dark'] & svg path {\n    fill: white;\n  }\n\n  .select-box-opened & svg {\n    transform: rotate(-180deg);\n  }\n`;\n\nconst OptionsContainer = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  background-color: #f1f1f1;\n  position: absolute;\n  top: 30px;\n  left: 0;\n  border-bottom-left-radius: 5px;\n  border-bottom-right-radius: 5px;\n  height: auto;\n  max-height: 0px;\n  transition: max-height 0.1s linear;\n  overflow: hidden;\n  z-index: 100;\n\n  html[color-mode='dark'] & {\n    background-color: #343d50;\n  }\n\n  .select-box-opened & {\n    max-height: 194px;\n    overflow: hidden;\n  }\n`;\n\nconst Option = styled.button<{ active?: boolean }>`\n  background: none;\n  border: 0;\n  padding: 6px 10px;\n  text-align: left;\n  color: #1e1e1e;\n\n  html[color-mode='dark'] & {\n    color: rgba(255, 255, 255, 0.8);\n  }\n\n  &:first-of-type {\n    padding: 10px 10px 6px 10px;\n  }\n\n  &:last-child {\n    padding: 6px 10px 10px 10px;\n  }\n\n  &:hover {\n    color: #0a62ba;\n  }\n\n  ${({ active = false }) =>\n    active &&\n    css`\n      color: #0a62ba;\n    `}\n`;\n\nexport default ChartSelect;\n","import React, { useState, useEffect, useCallback } from 'react';\n\nimport ServiceWrapper from '../components/ServiceWrapper';\nimport SectionMenu from '../components/SectionMenu';\nimport SongRow from '../components/SongRow';\nimport {\n  Container,\n  SectionTitle,\n  StyledButton,\n  TopWrap,\n  ContentsWrap,\n  StyledCheckbox,\n  TopFilter,\n  TopFilterContentsWrap,\n  SelectLabel,\n  TopFilterButton,\n  TopFilterButtonIconWrap,\n  TopFilterButtonIcon as TopFilterCheckIcon,\n  FilterCheckboxWrap,\n  ChartDataWrap,\n  MobileChartFilterWrap,\n} from '../styles/pages/Playlist.style';\nimport {\n  Filters,\n  FilterContainer,\n  FilterTitle,\n  FilterContents,\n  FilterRow,\n  TopFilterRow,\n  FilterRowTitle,\n  FilterRowCheckbox,\n} from '../components/Filter';\nimport {\n  StyledServiceWrapper,\n  TopContentsScore,\n  BottomContainer,\n  BottomContents,\n  BottomContentsScore,\n} from '../components/SectionPage';\nimport ChartSelect from '../components/ChartSelect';\n\nimport { api } from '../utils/api';\nimport useWindowSize from '../utils/useWindowSize';\n\nimport { IFilterCategory, IAlbum, IPlaylist } from '../types';\nimport auth from '../utils/auth';\nimport { useHistory } from 'react-router';\n\nimport SongIcon from '../assets/songrow-icon-1.svg';\nimport FilterIcon from '../assets/icons/filter.svg';\n\nimport Modal from '../components/Modal';\nimport { makeNewPlaylist, getPlaylist, savePlaylist } from '../utils/playlist';\nimport { PlaylistWrap, PlaylistRow } from '../components/PlaylistModal';\nimport styled from '@emotion/styled';\nimport Input from '../components/Input';\nimport TitleWithBack from '../components/TitleWithBack';\nimport TopFilterPlaylistIcon from '../assets/top-filter-playlist-icon.svg';\nimport SectionGrid from '../components/SectionGrid';\nimport TextHeader from \"../components/TextHeader\";\n\nconst Chart = () => {\n  const history = useHistory();\n\n  const { width: screenWidth = 1980 } = useWindowSize();\n  const isSmallScreen = screenWidth <= 500;\n\n  const [isChecked, setIsChecked] = useState(false);\n  const [ageFilter, setAgeFilter] = useState<string>('all');\n  const [categories, setCategories] = useState<Array<IFilterCategory>>();\n  const [allYears, setAllYears] = useState<boolean>(true);\n  const [yearsFilter, setYearsFilter] = useState<Array<string>>([]);\n  const [allFilter, setAllFilter] = useState<boolean>(true);\n  const [filter, setFilter] = useState<any>({});\n  const [chartData, setChartData] = useState<Array<IAlbum>>();\n  const [type, setType] = useState<string>('all');\n  const [checkedSongs, setCheckedSongs] = useState<Array<number>>([]);\n  const [isOpenPlaylistModal, setIsOpenPlaylistModal] = useState(false);\n  const [isNewPlaylist, setIsNewPlaylist] = useState(false);\n  const [playlists, setPlaylists] = useState<Array<IPlaylist>>([]);\n  const [newPlaylistName, setNewPlaylistName] = useState<string>('');\n  const [isFilterOpen, setIsFilterOpen] = useState<boolean>(false);\n\n  const checkedFilter = (category: any, sub_category: any) =>\n    filter[category.id].includes(sub_category.id);\n\n  const handleChangeCategoryFilter = (\n    e: any,\n    category: any,\n    sub_category: any,\n  ) => {\n    if (e.target.checked) {\n      setFilter((prevState: any) => {\n        let temp = { ...prevState };\n        temp[category.id].push(sub_category.id);\n        return temp;\n      });\n    } else {\n      setFilter((prevState: any) => {\n        let temp = { ...prevState };\n        temp[category.id].splice(temp[category.id].indexOf(sub_category.id), 1);\n        return temp;\n      });\n    }\n    if (allFilter) {\n      setAllFilter(false);\n      setFilter((prevState: any) => {\n        let temp = { ...prevState };\n        temp[category.id].push(sub_category.id);\n        return temp;\n      });\n    }\n  };\n\n  const handleCheckSongRow = (song: any) => {\n    if (checkedSongs.includes(song.id)) {\n      setCheckedSongs((prevState) => {\n        let temp = [...prevState];\n        temp.splice(temp.indexOf(song.id), 1);\n        return temp;\n      });\n    } else {\n      setCheckedSongs((prevState) => {\n        let temp = [...prevState];\n        temp.push(song.id);\n        return temp;\n      });\n    }\n  };\n\n  const fetchData = useCallback(async () => {\n    let genres: any[] = [];\n    await Object.keys(filter).forEach((key) => {\n      genres.push(...filter[key]);\n    });\n    const {\n      data: {\n        data: { charts },\n      },\n    } = await api.get('/chart/index', {\n      params: {\n        years: allYears ? 'all' : yearsFilter.toString(),\n        genres: genres.toString(),\n        age: ageFilter === 'all' ? '' : ageFilter,\n        type,\n      },\n    });\n    setChartData(charts);\n    // eslint-disable-next-line\n  }, [allYears, yearsFilter, ageFilter, type]);\n\n  useEffect(() => {\n    const fetchFilterData = async () => {\n      const {\n        data: {\n          data: { categories },\n        },\n      } = await api.get('/music/category');\n      categories.map((category: any) =>\n        setFilter((prevState: any) => {\n          prevState[category.id] = [];\n          return prevState;\n        }),\n      );\n      setCategories(categories);\n    };\n    fetchFilterData();\n    fetchData();\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchData();\n    // eslint-disable-next-line\n  }, [ageFilter, type]);\n\n  useEffect(() => {\n    if (auth.getToken()) {\n      getPlaylist().then((playlists) => setPlaylists(playlists));\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!isChecked) {\n      setCheckedSongs([]);\n    }\n  }, [isChecked]);\n\n  useEffect(() => {\n    if (!isOpenPlaylistModal) {\n      setNewPlaylistName('');\n    }\n  }, [isOpenPlaylistModal]);\n\n  useEffect(() => {\n    if (!allYears) {\n      setYearsFilter([]);\n    }\n  }, [allYears]);\n\n  useEffect(() => {\n    if (!allFilter) {\n      Object.keys(filter).forEach((key) => {\n        setFilter((prevState: any) => {\n          let data = { ...prevState };\n          data[key] = [];\n          return data;\n        });\n      });\n    }\n    // eslint-disable-next-line\n  }, [allFilter]);\n\n  const changeYearsFilter = (prevState: Array<string>, year: string) => {\n    const index = prevState.indexOf(year);\n    if (index !== -1) {\n      return prevState.filter((prevYear) => prevYear !== year);\n    } else {\n      return prevState.concat(year);\n    }\n  };\n\n  const renderFilterContent = () => {\n    return (\n      <>\n        {!isFilterOpen && (\n          <TopWrap>\n            <SectionTitle>필터 검색</SectionTitle>\n            <StyledButton styleType=\"blue\" onClick={fetchData}>\n              적용\n            </StyledButton>\n          </TopWrap>\n        )}\n        <Filters>\n          <FilterContainer>\n            <FilterTitle>\n              <span>발매일</span>\n              {isSmallScreen && (\n                <StyledCheckbox\n                  checked={allYears}\n                  onChange={(e: any) => setAllYears(e.target.checked)}\n                >\n                  전체\n                </StyledCheckbox>\n              )}\n            </FilterTitle>\n            <FilterContents>\n              <TopFilterRow>\n                {!isSmallScreen && (\n                  <StyledCheckbox\n                    checked={allYears}\n                    onChange={(e: any) => setAllYears(e.target.checked)}\n                  >\n                    전체\n                  </StyledCheckbox>\n                )}\n                <StyledCheckbox\n                  checked={allYears || yearsFilter.includes('1960')}\n                  onChange={(e: any) => {\n                    setAllYears(false);\n                    setYearsFilter((prevState) =>\n                      changeYearsFilter(prevState, '1960'),\n                    );\n                  }}\n                >\n                  ~1960년대\n                </StyledCheckbox>\n                <StyledCheckbox\n                  checked={allYears || yearsFilter.includes('1970')}\n                  onChange={(e: any) => {\n                    setAllYears(false);\n                    setYearsFilter((prevState) =>\n                      changeYearsFilter(prevState, '1970'),\n                    );\n                  }}\n                >\n                  1970년대\n                </StyledCheckbox>\n                <StyledCheckbox\n                  checked={allYears || yearsFilter.includes('1980')}\n                  onChange={(e: any) => {\n                    setAllYears(false);\n                    setYearsFilter((prevState) =>\n                      changeYearsFilter(prevState, '1980'),\n                    );\n                  }}\n                >\n                  1980년대\n                </StyledCheckbox>\n                <StyledCheckbox\n                  checked={allYears || yearsFilter.includes('1990')}\n                  onChange={(e: any) => {\n                    setAllYears(false);\n                    setYearsFilter((prevState) =>\n                      changeYearsFilter(prevState, '1990'),\n                    );\n                  }}\n                >\n                  1990년대\n                </StyledCheckbox>\n                <StyledCheckbox\n                  checked={allYears || yearsFilter.includes('2000')}\n                  onChange={(e: any) => {\n                    setAllYears(false);\n                    setYearsFilter((prevState) =>\n                      changeYearsFilter(prevState, '2000'),\n                    );\n                  }}\n                >\n                  2000년대\n                </StyledCheckbox>\n                <StyledCheckbox\n                  checked={allYears || yearsFilter.includes('2010')}\n                  onChange={(e: any) => {\n                    setAllYears(false);\n                    setYearsFilter((prevState) =>\n                      changeYearsFilter(prevState, '2010'),\n                    );\n                  }}\n                >\n                  2010년대\n                </StyledCheckbox>\n              </TopFilterRow>\n            </FilterContents>\n          </FilterContainer>\n          <FilterContainer>\n            <FilterTitle>\n              <span>장르</span>\n              {isSmallScreen && (\n                <StyledCheckbox\n                  checked={allFilter}\n                  onChange={(e: any) => setAllFilter(e.target.checked)}\n                >\n                  전체\n                </StyledCheckbox>\n              )}\n            </FilterTitle>\n            <FilterContents>\n              {!isSmallScreen && (\n                <FilterRow>\n                  <StyledCheckbox\n                    checked={allFilter}\n                    onChange={(e: any) => setAllFilter(e.target.checked)}\n                  >\n                    전체\n                  </StyledCheckbox>\n                </FilterRow>\n              )}\n              {categories &&\n                categories.map((category) => (\n                  <FilterRow\n                    key={`filter-category-${category.id}`}\n                    className=\"column\"\n                  >\n                    <FilterRowTitle>{category.category}</FilterRowTitle>\n                    <FilterCheckboxWrap>\n                      {category.sub_category &&\n                        category.sub_category.map((sub_category) => (\n                          <FilterRowCheckbox\n                            key={`filter-sub-category-${sub_category.id}`}\n                            checked={\n                              allFilter || checkedFilter(category, sub_category)\n                            }\n                            onChange={(e: any) =>\n                              handleChangeCategoryFilter(\n                                e,\n                                category,\n                                sub_category,\n                              )\n                            }\n                          >\n                            {sub_category.category}\n                          </FilterRowCheckbox>\n                        ))}\n                    </FilterCheckboxWrap>\n                  </FilterRow>\n                ))}\n            </FilterContents>\n          </FilterContainer>\n        </Filters>\n        {isSmallScreen && (\n          <StyledButton styleType=\"blue\" onClick={fetchData}>\n            적용\n          </StyledButton>\n        )}\n      </>\n    );\n  };\n\n  return (\n    <StyledServiceWrapper>\n      <TopContentsScore>\n        <TextHeader>인기 악보</TextHeader>\n      </TopContentsScore>\n      <BottomContainer>\n        <StyledBottomContents>\n          <ContentsWrap>\n            {!isSmallScreen && renderFilterContent()}\n            <TopFilter>\n              <TopFilterContentsWrap>\n                <SelectLabel>연령대별</SelectLabel>\n                <ChartSelect\n                  value={ageFilter}\n                  onChange={(value) => setAgeFilter(value)}\n                  placeholder=\"전체\"\n                  options={[\n                    { key: '전체', value: 'all' },\n                    { key: '10대', value: '10' },\n                    { key: '20대', value: '20' },\n                    { key: '30대', value: '30' },\n                    { key: '40대', value: '40' },\n                    { key: '50대 이상', value: '50' },\n                  ]}\n                />\n              </TopFilterContentsWrap>\n              <TopFilterContentsWrap>\n                {!isSmallScreen && !isChecked && (\n                  <>\n                    <SectionMenu\n                      active={type === 'all'}\n                      onClick={() => setType('all')}\n                    >\n                      전체\n                    </SectionMenu>\n                    <SectionMenu\n                      active={type === 'daily'}\n                      onClick={() => setType('daily')}\n                    >\n                      일간\n                    </SectionMenu>\n                    <SectionMenu\n                      active={type === 'week'}\n                      onClick={() => setType('week')}\n                    >\n                      주간\n                    </SectionMenu>\n                    <SectionMenu\n                      active={type === 'month'}\n                      onClick={() => setType('month')}\n                    >\n                      월간\n                    </SectionMenu>\n                  </>\n                )}\n                {isSmallScreen ? (\n                  <>\n                    <TopFilterButton\n                      onClick={() => setIsFilterOpen(!isFilterOpen)}\n                    >\n                      <TopFilterButtonIconWrap>\n                        <FilterIcon />\n                      </TopFilterButtonIconWrap>\n                    </TopFilterButton>\n                    <TopFilterButton\n                      onClick={() =>\n                        auth.getToken()\n                          ? setIsOpenPlaylistModal(true)\n                          : history.push('/playlist')\n                      }\n                    >\n                      <TopFilterButtonIconWrap>\n                        <SongIcon />\n                      </TopFilterButtonIconWrap>\n                    </TopFilterButton>\n                    <TopFilterButton\n                      active={isChecked}\n                      onClick={() => setIsChecked((prevState) => !prevState)}\n                    >\n                      <TopFilterButtonIconWrap>\n                        <TopFilterCheckIcon />\n                      </TopFilterButtonIconWrap>\n                    </TopFilterButton>\n                  </>\n                ) : (\n                  <>\n                    {isChecked && (\n                      <TopFilterButton\n                        onClick={() =>\n                          auth.getToken()\n                            ? setIsOpenPlaylistModal(true)\n                            : history.push('/playlist')\n                        }\n                      >\n                        <TopFilterButtonIconWrap>\n                          <TopFilterPlaylistIcon />\n                        </TopFilterButtonIconWrap>\n                        PLAYLIST 담기\n                      </TopFilterButton>\n                    )}\n                    <TopFilterButton\n                      active={isChecked}\n                      onClick={() => setIsChecked((prevState) => !prevState)}\n                    >\n                      <TopFilterButtonIconWrap>\n                        <TopFilterCheckIcon />\n                      </TopFilterButtonIconWrap>\n                      선택하기\n                      {isChecked && <b>{checkedSongs.length}</b>}\n                    </TopFilterButton>\n                  </>\n                )}\n              </TopFilterContentsWrap>\n            </TopFilter>\n            {isSmallScreen && (\n              <MobileChartFilterWrap>\n                <SectionMenu\n                  active={type === 'all'}\n                  onClick={() => setType('all')}\n                >\n                  전체\n                </SectionMenu>\n                <SectionMenu\n                  active={type === 'daily'}\n                  onClick={() => setType('daily')}\n                >\n                  일간\n                </SectionMenu>\n                <SectionMenu\n                  active={type === 'week'}\n                  onClick={() => setType('week')}\n                >\n                  주간\n                </SectionMenu>\n                <SectionMenu\n                  active={type === 'month'}\n                  onClick={() => setType('month')}\n                >\n                  월간\n                </SectionMenu>\n              </MobileChartFilterWrap>\n            )}\n            <ChartDataWrap>\n              {chartData &&\n                chartData.map((song, index) =>\n                  isSmallScreen ? (\n                    <SectionGrid\n                      key={`song-row-section-grid${song.id}`}\n                      id={song.id}\n                      rank={index + 1}\n                      title={song.title}\n                      artist={song.singer}\n                      image={song.image_url}\n                      screenWidth={screenWidth}\n                      checked={checkedSongs.includes(song.id)}\n                      onClick={() =>\n                        isChecked\n                          ? handleCheckSongRow(song)\n                          : history.push(`/notes/${song.id}`)\n                      }\n                      visibleChecked={isChecked}\n                    />\n                  ) : (\n                    <SongRow\n                      key={`song-row-${song.id}`}\n                      id={song.id}\n                      rank={index + 1}\n                      title={song.title}\n                      artist={song.singer}\n                      image={song.image_url}\n                      visibleChecked={isChecked}\n                      checked={checkedSongs.includes(song.id)}\n                      onClick={() =>\n                        isChecked\n                          ? handleCheckSongRow(song)\n                          : history.push(`/notes/${song.id}`)\n                      }\n                    />\n                  ),\n                )}\n            </ChartDataWrap>\n          </ContentsWrap>\n        </StyledBottomContents>\n      </BottomContainer>\n      {isOpenPlaylistModal && (\n        <Modal\n          open={isOpenPlaylistModal}\n          onClose={() => setIsOpenPlaylistModal(false)}\n          title={!isNewPlaylist ? 'PLAYLIST' : 'NEW PLAYLIST'}\n          firstButtonLabel={\n            !isNewPlaylist ? '새 플레이리스트 생성' : '생성하기'\n          }\n          onClickFirstButton={\n            isNewPlaylist\n              ? async () => {\n                  await makeNewPlaylist(newPlaylistName);\n                  const playlists = await getPlaylist();\n                  setPlaylists(playlists);\n                  setIsNewPlaylist(false);\n                }\n              : () => setIsNewPlaylist(true)\n          }\n          secondButtonLabel=\"취소\"\n          onClickSecondButton={() =>\n            isNewPlaylist\n              ? setIsNewPlaylist(false)\n              : setIsOpenPlaylistModal(false)\n          }\n          content={\n            <>\n              {!isNewPlaylist ? (\n                <PlaylistWrap>\n                  {playlists.map((playlist) => (\n                    <PlaylistRow\n                      key={`playlist-${playlist.id}`}\n                      id={playlist.id}\n                      title={playlist.name}\n                      count={playlist.total_count}\n                      onClick={async (id: number) => {\n                        await savePlaylist(id, checkedSongs.toString());\n                        const playlists = await getPlaylist();\n                        setPlaylists(playlists);\n                        setIsOpenPlaylistModal(false);\n                      }}\n                    />\n                  ))}\n                </PlaylistWrap>\n              ) : (\n                <StyledInput\n                  icon=\"edit\"\n                  placeholder=\"PLAYLIST 이름을 입력해주세요\"\n                  value={newPlaylistName}\n                  onChange={(e) => setNewPlaylistName(e.target.value)}\n                />\n              )}\n            </>\n          }\n        />\n      )}\n      {isFilterOpen && (\n        <>\n          <FilterBackground>\n            <FilterHeader>\n              <TitleWithBack onClick={() => setIsFilterOpen(!isFilterOpen)}>\n                필터검색\n              </TitleWithBack>\n            </FilterHeader>\n            <FilterContentWrapper>{renderFilterContent()}</FilterContentWrapper>\n          </FilterBackground>\n        </>\n      )}\n    </StyledServiceWrapper>\n  );\n};\n\nconst StyledContainer = styled(Container)`\n  @media screen and (max-width: 500px) {\n    padding-top: 20px;\n  }\n`;\n\nconst StyledInput = styled(Input)`\n  margin-top: 36px;\n  html[color-mode='dark'] & {\n    background-color: #2e3137;\n  }\n`;\n\nconst FilterBackground = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 999999;\n  background-color: #f6f6f6;\n  height: 100vh;\n  overflow-y: scroll;\n\n  html[color-mode='dark'] & {\n    background-color: #151921;\n  }\n`;\n\nconst FilterHeader = styled.div`\n  padding: 19px 22px;\n`;\n\nconst FilterContentWrapper = styled.div`\n  padding: 30px 20px;\n`;\n\nconst StyledBottomContents = styled(BottomContentsScore)`\n  padding-top: 80px;\n\n  @media screen and (max-width: 960px) {\n    padding-top: 49px;\n  }\n\n  @media screen and (max-width: 360px) {\n    padding-top: 30px;\n  }\n`;\n\nexport default Chart;\n"],"sourceRoot":""}