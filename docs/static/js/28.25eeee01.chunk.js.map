{"version":3,"sources":["utils/useQueryString.ts","../node_modules/use-safe-window/index.esm.js","pages/KakaoLogin.tsx"],"names":["useQueryString","fn","def","currentLink","window","location","href","includes","queryString","split","query","pairs","substr","pairIndex","length","pair","decodeURIComponent","history","useHistory","useEffect","code","alert","push","getToken","a","Axios","post","params","grant_type","client_id","redirect_uri","origin","data","access_token","getUserInfo","token","property_keys","headers","Authorization","id","email","kakao_account","login","userId","api","provider","provider_id","refresh_token","getEmail","get","then","auth","setToken","setRefreshToken","setEmail","reload"],"mappings":"4KAMe,SAASA,IACtB,ICPqBC,EAAIC,EDOnBC,GCPeF,EDOa,SAACG,GAAD,OAAYA,EAAOC,SAASC,MCNrC,qBAAXF,OAAyBH,EAAGG,QAAUF,GDQpD,KAAI,OAACC,QAAD,IAACA,OAAD,EAACA,EAAaI,SAAS,MACzB,MAAO,GAQT,IANA,IAAMC,EAAcL,EAAYM,MAAM,KAAK,GACvCC,EAAgB,GACdC,GAA4B,MAAnBH,EAAY,GACvBA,EAAYI,OAAO,GACnBJ,GACFC,MAAM,KACCI,EAAY,EAAGA,EAAYF,EAAMG,OAAQD,IAAa,CAC7D,IAAME,EAAOJ,EAAME,GAAWJ,MAAM,KACpCC,EAAMM,mBAAmBD,EAAK,KAAOC,mBAAmBD,EAAK,IAAM,IAErE,OAAOL,E,6CEfM,qBACb,IAAMO,EAAUC,cACVR,EAAQV,IAgGd,OA/FAmB,qBAAU,WACHT,EAAMU,OACTC,MAAM,yEACNJ,EAAQK,KAAK,MAEf,IAAMC,EAAQ,uCAAG,8BAAAC,EAAA,+EAEUC,IAAMC,KAC3B,sCACA,GACA,CACEC,OAAQ,CACNC,WAAY,qBACZC,UAAW,mCACXC,aAAa,GAAD,OAAK1B,OAAOC,SAAS0B,OAArB,eACZX,KAAMV,EAAMU,QAVL,uBAELY,EAFK,EAELA,KAFK,kBAcNA,EAAKC,cAdC,gCAgBbZ,MAAM,yEACNJ,EAAQK,KAAK,KAjBA,yDAAH,qDAoBRY,EAAW,uCAAG,WAClBC,GADkB,iBAAAX,EAAA,+EAIOC,IAAMC,KAC3B,wEACA,CACEU,cAAe,CAAC,wBAElB,CACEC,QAAS,CACPC,cAAc,UAAD,OAAYH,MAXf,uBAIRH,EAJQ,EAIRA,KAJQ,kBAeT,CAAEO,GAAIP,EAAKO,GAAIC,MAAOR,EAAKS,cAAcD,QAfhC,gCAiBhBnB,MAAM,yEACNJ,EAAQK,KAAK,KAlBG,iCAoBX,CAAEiB,GAAI,GAAIC,MAAO,KApBN,yDAAH,sDAsBXE,EAAK,uCAAG,WAAOC,EAAgBH,GAAvB,qBAAAhB,EAAA,+EAQAoB,IAAIlB,KAAK,aAAc,CAC/BmB,SAAU,QACVC,YAAaH,EACbH,MAAOA,IAXC,2BAGRR,KACEA,KACEC,aAAgBA,EALZ,EAKYA,aAAcc,EAL1B,EAK0BA,cAL1B,kBAaH,CAAEd,eAAcc,kBAbb,kCAeV1B,MAAM,yEACNJ,EAAQK,KAAK,KAhBH,iCAkBL,CAAEW,aAAc,KAAMc,cAAe,OAlBhC,0DAAH,wDAoBLC,EAAQ,uCAAG,WAAOb,GAAP,iBAAAX,EAAA,+EAMHoB,IAAIK,IAAI,QAAS,CACzBZ,QAAS,CAAEC,cAAc,UAAD,OAAYH,MAPzB,uBAIDK,EAJC,EAGXR,KACEA,KAAQQ,MAJC,kBASNA,GATM,gCAWbnB,MAAM,yEACNJ,EAAQK,KAAK,KAZA,yDAAH,sDAgBdC,IAAW2B,MAAK,SAACf,GACfD,EAAYC,GAAOe,MAAK,gBAAGX,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACtBE,EAAMH,EAAIC,GAAOU,MAAK,YAAsC,IAAnCjB,EAAkC,EAAlCA,aAAcc,EAAoB,EAApBA,cACrCI,IAAKC,SAASnB,GACdkB,IAAKE,gBAAgBN,GACrBC,EAASf,GAAciB,MAAK,SAACV,GAAD,OAAWW,IAAKG,SAASd,MACrDvB,EAAQK,KAAK,KACblB,OAAOC,SAASkD,oBAIrB,CAACtC,EAASP,EAAMU,OACZ","file":"static/js/28.25eeee01.chunk.js","sourcesContent":["import { useSafeWindow } from 'use-safe-window';\n\ninterface IQuery {\n  [key: string]: string;\n}\n\nexport default function useQueryString(): IQuery {\n  const currentLink = useSafeWindow((window) => window.location.href);\n\n  if (!currentLink?.includes('?')) {\n    return {};\n  }\n  const queryString = currentLink.split('?')[1];\n  let query: IQuery = {};\n  const pairs = (queryString[0] === '?'\n    ? queryString.substr(1)\n    : queryString\n  ).split('&');\n  for (let pairIndex = 0; pairIndex < pairs.length; pairIndex++) {\n    const pair = pairs[pairIndex].split('=');\n    query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '');\n  }\n  return query;\n}\n","function useSafeWindow(fn, def) {\n  return typeof window !== \"undefined\" ? fn(window) : def;\n}\n\nexport { useSafeWindow };\n","import { useEffect } from 'react';\nimport useQueryString from '../utils/useQueryString';\nimport { useHistory } from 'react-router';\nimport Axios from 'axios';\nimport { api } from '../utils/api';\nimport auth from '../utils/auth';\n\nexport default () => {\n  const history = useHistory();\n  const query = useQueryString();\n  useEffect(() => {\n    if (!query.code) {\n      alert('올바르지 않은 접근입니다.');\n      history.push('/');\n    }\n    const getToken = async () => {\n      try {\n        const { data } = await Axios.post(\n          'https://kauth.kakao.com/oauth/token',\n          {},\n          {\n            params: {\n              grant_type: 'authorization_code',\n              client_id: '1d5d500b8e0b93e7c19c764ab73d07be',\n              redirect_uri: `${window.location.origin}/auth/kakao`,\n              code: query.code,\n            },\n          },\n        );\n        return data.access_token;\n      } catch (err) {\n        alert('올바르지 않은 접근입니다.');\n        history.push('/');\n      }\n    };\n    const getUserInfo = async (\n      token: string,\n    ): Promise<{ id: string; email: string }> => {\n      try {\n        const { data } = await Axios.post(\n          'https://cors-anywhere.herokuapp.com/https://kapi.kakao.com/v2/user/me',\n          {\n            property_keys: ['kakao_account.email'],\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n            },\n          },\n        );\n        return { id: data.id, email: data.kakao_account.email };\n      } catch (err) {\n        alert('올바르지 않은 접근입니다.');\n        history.push('/');\n      }\n      return { id: '', email: '' };\n    };\n    const login = async (userId: string, email: string) => {\n      try {\n        const {\n          data: {\n            data: {\n              access_token: { access_token, refresh_token },\n            },\n          },\n        } = await api.post('/sns/login', {\n          provider: 'kakao',\n          provider_id: userId,\n          email: email,\n        });\n        return { access_token, refresh_token };\n      } catch (err) {\n        alert('올바르지 않은 접근입니다.');\n        history.push('/');\n      }\n      return { access_token: null, refresh_token: null };\n    };\n    const getEmail = async (token: string) => {\n      try {\n        const {\n          data: {\n            data: { email },\n          },\n        } = await api.get('/user', {\n          headers: { Authorization: `Bearer ${token}` },\n        });\n        return email;\n      } catch (err) {\n        alert('올바르지 않은 접근입니다.');\n        history.push('/');\n      }\n    };\n\n    getToken().then((token) => {\n      getUserInfo(token).then(({ id, email }) =>\n        login(id, email).then(({ access_token, refresh_token }) => {\n          auth.setToken(access_token);\n          auth.setRefreshToken(refresh_token);\n          getEmail(access_token).then((email) => auth.setEmail(email));\n          history.push('/');\n          window.location.reload();\n        }),\n      );\n    });\n  }, [history, query.code]);\n  return null;\n};\n"],"sourceRoot":""}