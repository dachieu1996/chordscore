{"version":3,"sources":["components/SectionGrid.tsx","pages/Recent.tsx"],"names":["Container","styled","div","checked","css","AbsoluteBox","SmallRank","Rank","span","InfoWrap","Title","Artist","LeftWrap","RightWrap","Button","button","isOpacityDisabled","SectionGrid","id","deleteId","className","image","title","artist","rank","screenWidth","onClick","visibleChecked","isPlaylist","onUpdate","history","useHistory","isSmallScreen","useState","setPlaylists","isOpenPlaylistModal","setIsOpenPlaylistModal","PlayListIcon","require","default","CheckedIcon","RemoveIcon","onRemoveItem","e","stopPropagation","api","delete","useEffect","getPlaylist","then","playlists","push","auth","getToken","Recent","useWindowSize","width","isChecked","setIsChecked","chartData","setChartData","checkedSongs","setCheckedSongs","isNewPlaylist","setIsNewPlaylist","newPlaylistName","setNewPlaylistName","handleCheckSongRow","song","includes","prevState","temp","splice","indexOf","fetchData","useCallback","a","get","charts","data","new","StyledBottomContents","style","marginLeft","active","length","map","key","singer","image_url","open","onClose","firstButtonLabel","onClickFirstButton","makeNewPlaylist","secondButtonLabel","onClickSecondButton","content","StyledInput","icon","placeholder","value","onChange","target","playlist","name","count","total_count","savePlaylist","toString","Input","BottomContentsScore"],"mappings":"ywJA6BA,IA+GMA,EAAYC,IAAOC,IAAV,KAsCX,qBAAGC,SAEHC,YADO,QAWLC,EAAcJ,IAAOC,IAAV,KAaXI,EAAYL,IAAOC,IAAV,KA2CTK,EAAON,IAAOO,KAAV,KAYJC,EAAWR,IAAOC,IAAV,KA6BRQ,EAAQT,IAAOO,KAAV,KA0BLG,EAASV,IAAOO,KAAV,KAqBNI,EAAWX,IAAOC,IAAV,KAKRW,EAAYZ,IAAOC,IAAV,KAQTY,EAASb,IAAOc,OAAV,KAuBQ,qBAAGC,kBACK,EAAI,MAK5B,qBAAGb,SAEHC,YADO,QAaIa,IAzWK,SAAC,GAcN,IAbbC,EAaY,EAbZA,GACAC,EAYY,EAZZA,SAEAC,GAUY,EAXZC,MAWY,EAVZD,WACAE,EASY,EATZA,MACAC,EAQY,EARZA,OACAC,EAOY,EAPZA,KAOY,IANZC,mBAMY,MANE,KAMF,MALZtB,eAKY,SAJZuB,EAIY,EAJZA,QAIY,IAHZC,sBAGY,aAFZC,kBAEY,SADZC,EACY,EADZA,SAEMC,EAAUC,cACVC,EAAgBP,GAAe,IAFzB,EAIsBQ,mBAA2B,IAJjD,mBAIMC,GAJN,aAK0CD,oBAAS,GALnD,mBAKLE,EALK,KAKgBC,EALhB,KAQNC,EAAeC,EAAQ,KAAgCC,QACvDC,EAAcF,OAAQ,8BAC1BnC,EAAU,KAAO,GADQ,SAGrBsC,EAAaH,EAAQ,KAErBI,EAAe,SAACC,GACpBA,EAAEC,kBACFC,IAAIC,OAAJ,2CAA+C3B,IAC3CU,GACFA,KAUJ,OANAkB,qBAAU,WACJZ,GACFa,cAAcC,MAAK,SAACC,GAAD,OAAehB,EAAagB,QAEhD,CAACf,IAGF,kBAACnC,EAAD,CACEoB,UAAWA,GAAa,GACxBjB,QAASA,EACTuB,QAASA,GA1BO,kBAAMI,EAAQqB,KAAR,iBAAuBjC,MA4B5CM,GAAQQ,GAAiB,kBAAC1B,EAAD,KAAYkB,GAQtC,kBAACnB,EAAD,KACGmB,IAASQ,GAAiB,kBAACzB,EAAD,KAAOiB,GAClC,kBAACf,EAAD,KACE,kBAACG,EAAD,KACE,kBAACF,EAAD,KAAQY,GACR,kBAACX,EAAD,KAASY,IAEX,kBAACV,EAAD,KACGmB,EACC,oCACGL,EACC,kBAACb,EAAD,CAAQX,QAASA,GACf,kBAACqC,EAAD,OAEAZ,EACF,kBAACd,EAAD,CAAQE,mBAAiB,EAACU,QAASgB,GACjC,kBAACD,EAAD,OAEA,MAGN,oCACGb,EACC,oCACE,kBAACd,EAAD,CAAQE,mBAAiB,EAACU,QAASgB,GACjC,kBAACD,EAAD,QAGFd,EACF,kBAACb,EAAD,CAAQX,QAASA,GACf,kBAACqC,EAAD,OAGF,oCACE,kBAAC1B,EAAD,CACEY,QAAS,SAACiB,GACRA,EAAEC,kBACFQ,IAAKC,WACDjB,GAAuB,GACvBN,EAAQqB,KAAK,eAGnB,kBAACd,EAAD,e,upBCyIPiB,UAhOA,WACb,IAAMxB,EAAUC,cADG,EAGmBwB,cAA9BC,MAAO/B,OAHI,MAGU,KAHV,EAIbO,EAAgBP,GAAe,IAJlB,EAMeQ,oBAAS,GANxB,mBAMZwB,EANY,KAMDC,EANC,OAOezB,qBAPf,mBAOZ0B,EAPY,KAODC,EAPC,OAQqB3B,mBAAwB,IAR7C,mBAQZ4B,EARY,KAQEC,EARF,OASmC7B,oBAAS,GAT5C,mBASZE,EATY,KASSC,EATT,OAUuBH,oBAAS,GAVhC,mBAUZ8B,EAVY,KAUGC,EAVH,OAWe/B,mBAA2B,IAX1C,mBAWZiB,EAXY,KAWDhB,EAXC,OAY2BD,mBAAiB,IAZ5C,mBAYZgC,EAZY,KAYKC,EAZL,KAcbC,GAAqB,SAACC,GACtBP,EAAaQ,SAASD,EAAKlD,IAC7B4C,GAAgB,SAACQ,GACf,IAAIC,EAAI,YAAOD,GAEf,OADAC,EAAKC,OAAOD,EAAKE,QAAQL,EAAKlD,IAAK,GAC5BqD,KAGTT,GAAgB,SAACQ,GACf,IAAIC,EAAI,YAAOD,GAEf,OADAC,EAAKpB,KAAKiB,EAAKlD,IACRqD,MAKPG,GAAYC,sBAAW,sBAAC,8BAAAC,EAAA,sEAKlB/B,IAAIgC,IAAI,gBALU,gBAGXC,EAHW,EAE1BC,KACEA,KAAQC,IAGZpB,EAAakB,GANe,2CAQ3B,IAyBH,OAvBA/B,qBAAU,WACR2B,OAEC,IAEH3B,qBAAU,WACJK,IAAKC,YACPL,cAAcC,MAAK,SAACC,GAAD,OAAehB,EAAagB,QAEhD,IAEHH,qBAAU,WACHU,GACHK,EAAgB,MAEjB,CAACL,IAEJV,qBAAU,WACHZ,GACH+B,EAAmB,MAEpB,CAAC/B,IAGF,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,mCAEF,kBAAC,IAAD,KACE,kBAAC8C,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAuBC,MAAO,CAAEC,WAAY,SACzCnD,EACC,oCACE,kBAAC,IAAD,CACEN,QAAS,kBACP0B,IAAKC,WACDjB,GAAuB,GACvBN,EAAQqB,KAAK,eAGnB,kBAAC,IAAD,KACE,kBAAC,IAAD,QAGJ,kBAAC,IAAD,CACEiC,OAAQ3B,EACR/B,QAAS,kBAAMgC,GAAa,SAACY,GAAD,OAAgBA,OAE5C,kBAAC,IAAD,KACE,kBAAC,IAAD,SAKN,oCACGb,GACC,kBAAC,IAAD,CACE/B,QAAS,kBACP0B,IAAKC,WACDjB,GAAuB,GACvBN,EAAQqB,KAAK,eAGnB,kBAAC,IAAD,KACE,kBAAC,IAAD,OARJ,yBAaF,kBAAC,IAAD,CACEiC,OAAQ3B,EACR/B,QAAS,kBAAMgC,GAAa,SAACY,GAAD,OAAgBA,OAE5C,kBAAC,IAAD,KACE,kBAAC,IAAD,OALJ,2BAQGb,GAAa,2BAAII,EAAawB,YAMzC,kBAAC,IAAD,KACG1B,GACDA,EAAU2B,KAAI,SAAClB,GAAD,OACVpC,EACI,kBAAC,IAAD,CACIuD,IAAG,+BAA0BnB,EAAKlD,IAClCA,GAAIkD,EAAKlD,GACTI,MAAO8C,EAAK9C,MACZC,OAAQ6C,EAAKoB,OACbnE,MAAO+C,EAAKqB,UACZhE,YAAaA,EACbtB,QAAS0D,EAAaQ,SAASD,EAAKlD,IACpCQ,QAAS,kBACL+B,EACMU,GAAmBC,GACnBtC,EAAQqB,KAAR,iBAAuBiB,EAAKlD,MAEtCS,eAAgB8B,IAGpB,kBAAC,IAAD,CACI8B,IAAG,mBAAcnB,EAAKlD,IACtBA,GAAIkD,EAAKlD,GACTI,MAAO8C,EAAK9C,MACZC,OAAQ6C,EAAKoB,OACbnE,MAAO+C,EAAKqB,UACZ9D,eAAgB8B,EAChBtD,QAAS0D,EAAaQ,SAASD,EAAKlD,IACpCQ,QAAS,kBACL+B,EACMU,GAAmBC,GACnBtC,EAAQqB,KAAR,iBAAuBiB,EAAKlD,eASzDiB,GACC,kBAAC,IAAD,CACEuD,KAAMvD,EACNwD,QAAS,kBAAMvD,GAAuB,IACtCd,MAAQyC,EAA6B,eAAb,WACxB6B,iBACG7B,EAAgC,2BAAhB,2DAEnB8B,mBACE9B,EAAa,sBACT,4BAAAa,EAAA,sEACQkB,YAAgB7B,GADxB,uBAE0BjB,cAF1B,OAEQE,EAFR,OAGEhB,EAAagB,GACbc,GAAiB,GAJnB,2CAMA,kBAAMA,GAAiB,IAE7B+B,kBAAkB,eAClBC,oBAAqB,kBACnBjC,EACIC,GAAiB,GACjB5B,GAAuB,IAE7B6D,QACE,oCACIlC,EAkBA,kBAACmC,EAAD,CACEC,KAAK,OACLC,YAAY,mEACZC,MAAOpC,EACPqC,SAAU,SAAC3D,GAAD,OAAOuB,EAAmBvB,EAAE4D,OAAOF,UArB/C,kBAAC,IAAD,KACGnD,EAAUoC,KAAI,SAACkB,GAAD,OACb,kBAAC,IAAD,CACEjB,IAAG,mBAAciB,EAAStF,IAC1BA,GAAIsF,EAAStF,GACbI,MAAOkF,EAASC,KAChBC,MAAOF,EAASG,YAChBjF,QAAO,uCAAE,WAAOR,GAAP,eAAA0D,EAAA,sEACDgC,YAAa1F,EAAI2C,EAAagD,YAD7B,uBAEiB7D,cAFjB,OAEDE,EAFC,OAGPhB,EAAagB,GACbd,GAAuB,GAJhB,2CAAF,iEA2B7B,IAAM8D,EAAcjG,YAAO6G,IAAP7G,CAAH,KAOXgF,EAAuBhF,YAAO8G,IAAP9G,CAAH","file":"static/js/24.90ff3bd5.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport css from '@emotion/css';\nimport styled from '@emotion/styled';\n\nimport { useHistory } from 'react-router';\nimport { api } from '../utils/api';\nimport { getPlaylist } from '../utils/playlist';\nimport { IPlaylist } from '../types';\nimport auth from '../utils/auth';\n\ninterface IPropsForChart {\n  checked?: boolean;\n  onClick?: () => void;\n}\n\ninterface IProps extends IPropsForChart {\n  id: number;\n  deleteId?: number;\n  className?: string;\n  image: string;\n  title: string;\n  artist: string;\n  rank?: string | number;\n  screenWidth?: number;\n  visibleChecked?: boolean;\n  isPlaylist?: boolean;\n  onUpdate?: () => void;\n}\n\nconst SectionGrid = ({\n  id,\n  deleteId,\n  image,\n  className,\n  title,\n  artist,\n  rank,\n  screenWidth = 1980,\n  checked = false,\n  onClick,\n  visibleChecked = false,\n  isPlaylist = false,\n  onUpdate,\n}: IProps) => {\n  const history = useHistory();\n  const isSmallScreen = screenWidth <= 700;\n  // eslint-disable-next-line\n  const [playlists, setPlaylists] = useState<Array<IPlaylist>>([]);\n  const [isOpenPlaylistModal, setIsOpenPlaylistModal] = useState(false);\n  const handleClick = () => history.push(`/notes/${id}`);\n\n  const PlayListIcon = require(`../assets/songrow-icon-1.svg`).default;\n  const CheckedIcon = require(`../assets/songrow-icon-check${\n    checked ? 'ed' : ''\n  }.svg`);\n  const RemoveIcon = require(`../assets/icons/remove.svg`);\n\n  const onRemoveItem = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    api.delete(`/playlist/chord/delete?chord_ids=${deleteId}`);\n    if (onUpdate) {\n      onUpdate();\n    }\n  };\n\n  useEffect(() => {\n    if (isOpenPlaylistModal) {\n      getPlaylist().then((playlists) => setPlaylists(playlists));\n    }\n  }, [isOpenPlaylistModal]);\n\n  return (\n    <Container\n      className={className || ''}\n      checked={checked}\n      onClick={onClick || handleClick}\n    >\n      {rank && isSmallScreen && <SmallRank>{rank}</SmallRank>}\n      {/* {image ? (\n        <Image src={image} onLoad={() => setIsLoaded(true)} />\n      ) : (\n        <DefaultCoverWrap>\n          <DefaultCover />\n        </DefaultCoverWrap>\n      )} */}\n      <AbsoluteBox>\n        {rank && !isSmallScreen && <Rank>{rank}</Rank>}\n        <InfoWrap>\n          <LeftWrap>\n            <Title>{title}</Title>\n            <Artist>{artist}</Artist>\n          </LeftWrap>\n          <RightWrap>\n            {isSmallScreen ? (\n              <>\n                {visibleChecked ? (\n                  <Button checked={checked}>\n                    <CheckedIcon />\n                  </Button>\n                ) : isPlaylist ? (\n                  <Button isOpacityDisabled onClick={onRemoveItem}>\n                    <RemoveIcon />\n                  </Button>\n                ) : null}\n              </>\n            ) : (\n              <>\n                {isPlaylist ? (\n                  <>\n                    <Button isOpacityDisabled onClick={onRemoveItem}>\n                      <RemoveIcon />\n                    </Button>\n                  </>\n                ) : visibleChecked ? (\n                  <Button checked={checked}>\n                    <CheckedIcon />\n                  </Button>\n                ) : (\n                  <>\n                    <Button\n                      onClick={(e: React.MouseEvent) => {\n                        e.stopPropagation();\n                        auth.getToken()\n                          ? setIsOpenPlaylistModal(true)\n                          : history.push('/playlist');\n                      }}\n                    >\n                      <PlayListIcon />\n                    </Button>\n                  </>\n                )}\n              </>\n            )}\n          </RightWrap>\n        </InfoWrap>\n      </AbsoluteBox>\n    </Container>\n  );\n};\n\nconst Container = styled.div<IPropsForChart>`\n  border: 1px solid transparent;\n  border-radius: 5px;\n  overflow: hidden;\n  position: relative;\n  margin-right: 18px;\n  background-color: #ffffff;\n  cursor: inherit;\n\n  @media screen and (max-width: 960px) {\n    margin-right: 13px;\n    width: calc(20% - 13px);\n\n    &:nth-of-type(-n + 5) {\n      margin-bottom: 14px;\n    }\n  }\n\n  @media screen and (max-width: 700px) {\n    display: flex;\n    justify-content: flex-start;\n    width: 100%;\n    height: 60px;\n    padding: 11px 15px 10px 10px;\n    align-items: center;\n    margin-bottom: 15px;\n    margin-right: 0;\n    background-color: transparent;\n\n    &:nth-of-type(-n + 5) {\n      margin-bottom: 15px;\n    }\n\n    &:last-of-type {\n      margin-bottom: 0;\n    }\n  }\n\n  ${({ checked }) =>\n    checked &&\n    css`\n      border: 1px solid rgba(10, 98, 186, 0.69) !important;\n\n      html[color-mode='dark'] & {\n        background-color: #182b4a !important;\n        border-color: transparent !important;\n      }\n    `};\n`;\n\nconst AbsoluteBox = styled.div`\n  display: flex;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n\n  @media screen and (max-width: 700px) {\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nconst SmallRank = styled.div`\n  display: flex;\n  justify-content: center;\n  min-width: 19px;\n  height: 18px;\n  font-size: 14px;\n  line-height: 1.14;\n  color: #1e1e1e;\n  margin-top: 3px;\n  margin-right: 10px;\n  margin-bottom: auto;\n\n  html[color-mode='dark'] & {\n    color: white;\n  }\n`;\n\n// const Image = styled.img`\n//   width: 100%;\n//   height: 100%;\n\n//   @media screen and (max-width: 700px) {\n//     width: 46px;\n//     height: 46px;\n//     object-fit: contain;\n//     border-radius: 2px;\n//   }\n// `;\n\n// const DefaultCoverWrap = styled.div`\n//   width: 100%;\n//   height: 100%;\n//   background-color: white;\n\n//   @media screen and (max-width: 700px) {\n//     min-width: 46px;\n//     width: 46px;\n//     height: 46px;\n//     object-fit: contain;\n//     border-radius: 2px;\n//   }\n// `;\n\nconst Rank = styled.span`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 41px;\n  height: 41px;\n  background-color: #0a62ba;\n  font-size: 16px;\n  font-weight: bold;\n  color: #ffffff;\n`;\n\nconst InfoWrap = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: space-between;\n  align-items: center;\n  /* display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  width: 100%;\n  height: 68px;\n  padding: 13px 9px;\n  margin-top: auto;\n  background-color: rgba(28, 34, 48, 0.81);\n\n  @media screen and (max-width: 960px) {\n    padding: 6px 7px;\n    height: 50px;\n    justify-content: center;\n  }\n\n  @media screen and (max-width: 700px) {\n    display: flex;\n    padding: 0;\n    height: unset;\n    margin-left: 15px;\n    background-color: transparent;\n  } */\n`;\n\nconst Title = styled.span`\n  width: 100%;\n  color: #ffffff;\n  margin-bottom: 5px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  @media screen and (max-width: 960px) {\n    font-size: 14px;\n    line-height: 1.1;\n  }\n\n  @media screen and (max-width: 700px) {\n    margin-bottom: 3px;\n    color: #1e1e1e;\n    width: 200px;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    html[color-mode='dark'] & {\n      color: white;\n    }\n  }\n`;\n\nconst Artist = styled.span`\n  opacity: 0.5;\n  color: #ffffff;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  @media screen and (max-width: 960px) {\n    font-size: 13px;\n    line-height: 1.1;\n  }\n\n  @media screen and (max-width: 700px) {\n    color: #1e1e1e;\n    opacity: 0.5;\n    html[color-mode='dark'] & {\n      color: white;\n    }\n  }\n`;\n\nconst LeftWrap = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst RightWrap = styled.div`\n  display: flex;\n`;\n\ninterface IButton {\n  checked?: boolean;\n  isOpacityDisabled?: boolean;\n}\nconst Button = styled.button<IButton>`\n  border: 0;\n  padding: 0;\n  outline: 0;\n  background: none;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 37px;\n  height: 37px;\n  background-color: rgba(74, 74, 75, 0.05);\n  border-radius: 6px;\n  margin-right: 30px;\n\n  &:last-of-type {\n    margin-right: 0;\n  }\n\n  html[color-mode='dark'] & {\n    background-color: rgba(216, 216, 216, 0.09);\n\n    & path {\n      /* opacity: ${({ isOpacityDisabled }) =>\n        isOpacityDisabled ? 1 : 0.4} !important; */\n      fill: #ffffff !important;\n    }\n  }\n\n  ${({ checked }) =>\n    checked &&\n    css`\n      background-color: rgba(10, 98, 186, 0.69);\n      html[color-mode='dark'] & {\n        background-color: rgba(10, 10, 11, 0.35);\n        & path {\n          fill: white !important;\n          opacity: 0.53;\n        }\n      }\n    `}\n`;\n\nexport default SectionGrid;\n","import React, { useState, useEffect, useCallback } from 'react';\n\nimport SongRow from '../components/SongRow';\nimport {\n  ContentsWrap,\n  TopFilter,\n  TopFilterContentsWrap,\n  TopFilterButton,\n  TopFilterButtonIconWrap,\n  TopFilterButtonIcon as TopFilterCheckIcon,\n  ChartDataWrap,\n} from '../styles/pages/Playlist.style';\n\nimport { api } from '../utils/api';\nimport useWindowSize from '../utils/useWindowSize';\n\nimport { IAlbum, IPlaylist } from '../types';\nimport auth from '../utils/auth';\nimport { useHistory } from 'react-router';\n\nimport SongIcon from '../assets/songrow-icon-1.svg';\n\nimport Modal from '../components/Modal';\nimport { makeNewPlaylist, getPlaylist, savePlaylist } from '../utils/playlist';\nimport { PlaylistWrap, PlaylistRow } from '../components/PlaylistModal';\nimport styled from '@emotion/styled';\nimport Input from '../components/Input';\nimport TopFilterPlaylistIcon from '../assets/top-filter-playlist-icon.svg';\nimport SectionGrid from '../components/SectionGrid';\n\nimport {\n  StyledServiceWrapper,\n  TopContents,\n  TopContentsScore,\n  BottomContainer,\n  BottomContents,\n  BottomContentsScore\n} from '../components/SectionPage';\nimport TextHeader from '../components/TextHeader';\n\nconst Recent = () => {\n  const history = useHistory();\n\n  const { width: screenWidth = 1980 } = useWindowSize();\n  const isSmallScreen = screenWidth <= 500;\n\n  const [isChecked, setIsChecked] = useState(false);\n  const [chartData, setChartData] = useState<Array<IAlbum>>();\n  const [checkedSongs, setCheckedSongs] = useState<Array<number>>([]);\n  const [isOpenPlaylistModal, setIsOpenPlaylistModal] = useState(false);\n  const [isNewPlaylist, setIsNewPlaylist] = useState(false);\n  const [playlists, setPlaylists] = useState<Array<IPlaylist>>([]);\n  const [newPlaylistName, setNewPlaylistName] = useState<string>('');\n\n  const handleCheckSongRow = (song: any) => {\n    if (checkedSongs.includes(song.id)) {\n      setCheckedSongs((prevState) => {\n        let temp = [...prevState];\n        temp.splice(temp.indexOf(song.id), 1);\n        return temp;\n      });\n    } else {\n      setCheckedSongs((prevState) => {\n        let temp = [...prevState];\n        temp.push(song.id);\n        return temp;\n      });\n    }\n  };\n\n  const fetchData = useCallback(async () => {\n    const {\n      data: {\n        data: { new: charts },\n      },\n    } = await api.get('/newest/more');\n    setChartData(charts);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchData();\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    if (auth.getToken()) {\n      getPlaylist().then((playlists) => setPlaylists(playlists));\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!isChecked) {\n      setCheckedSongs([]);\n    }\n  }, [isChecked]);\n\n  useEffect(() => {\n    if (!isOpenPlaylistModal) {\n      setNewPlaylistName('');\n    }\n  }, [isOpenPlaylistModal]);\n\n  return (\n    <StyledServiceWrapper>\n      <TopContentsScore>\n        <TextHeader>신규 악보</TextHeader>\n      </TopContentsScore>\n      <BottomContainer>\n        <StyledBottomContents>\n          <ContentsWrap>\n            <TopFilter>\n              <TopFilterContentsWrap style={{ marginLeft: 'auto' }}>\n                {isSmallScreen ? (\n                  <>\n                    <TopFilterButton\n                      onClick={() =>\n                        auth.getToken()\n                          ? setIsOpenPlaylistModal(true)\n                          : history.push('/playlist')\n                      }\n                    >\n                      <TopFilterButtonIconWrap>\n                        <SongIcon />\n                      </TopFilterButtonIconWrap>\n                    </TopFilterButton>\n                    <TopFilterButton\n                      active={isChecked}\n                      onClick={() => setIsChecked((prevState) => !prevState)}\n                    >\n                      <TopFilterButtonIconWrap>\n                        <TopFilterCheckIcon />\n                      </TopFilterButtonIconWrap>\n                    </TopFilterButton>\n                  </>\n                ) : (\n                  <>\n                    {isChecked && (\n                      <TopFilterButton\n                        onClick={() =>\n                          auth.getToken()\n                            ? setIsOpenPlaylistModal(true)\n                            : history.push('/playlist')\n                        }\n                      >\n                        <TopFilterButtonIconWrap>\n                          <TopFilterPlaylistIcon />\n                        </TopFilterButtonIconWrap>\n                        PLAYLIST 담기\n                      </TopFilterButton>\n                    )}\n                    <TopFilterButton\n                      active={isChecked}\n                      onClick={() => setIsChecked((prevState) => !prevState)}\n                    >\n                      <TopFilterButtonIconWrap>\n                        <TopFilterCheckIcon />\n                      </TopFilterButtonIconWrap>\n                      선택하기\n                      {isChecked && <b>{checkedSongs.length}</b>}\n                    </TopFilterButton>\n                  </>\n                )}\n              </TopFilterContentsWrap>\n            </TopFilter>\n            <ChartDataWrap>\n              {chartData &&\n              chartData.map((song) =>\n                  isSmallScreen ? (\n                      <SectionGrid\n                          key={`song-row-section-grid${song.id}`}\n                          id={song.id}\n                          title={song.title}\n                          artist={song.singer}\n                          image={song.image_url}\n                          screenWidth={screenWidth}\n                          checked={checkedSongs.includes(song.id)}\n                          onClick={() =>\n                              isChecked\n                                  ? handleCheckSongRow(song)\n                                  : history.push(`/notes/${song.id}`)\n                          }\n                          visibleChecked={isChecked}\n                      />\n                  ) : (\n                      <SongRow\n                          key={`song-row-${song.id}`}\n                          id={song.id}\n                          title={song.title}\n                          artist={song.singer}\n                          image={song.image_url}\n                          visibleChecked={isChecked}\n                          checked={checkedSongs.includes(song.id)}\n                          onClick={() =>\n                              isChecked\n                                  ? handleCheckSongRow(song)\n                                  : history.push(`/notes/${song.id}`)\n                          }\n                      />\n                  ),\n              )}\n            </ChartDataWrap>\n          </ContentsWrap>\n        </StyledBottomContents>\n      </BottomContainer>\n      {isOpenPlaylistModal && (\n        <Modal\n          open={isOpenPlaylistModal}\n          onClose={() => setIsOpenPlaylistModal(false)}\n          title={!isNewPlaylist ? 'PLAYLIST' : 'NEW PLAYLIST'}\n          firstButtonLabel={\n            !isNewPlaylist ? '새 플레이리스트 생성' : '생성하기'\n          }\n          onClickFirstButton={\n            isNewPlaylist\n              ? async () => {\n                  await makeNewPlaylist(newPlaylistName);\n                  const playlists = await getPlaylist();\n                  setPlaylists(playlists);\n                  setIsNewPlaylist(false);\n                }\n              : () => setIsNewPlaylist(true)\n          }\n          secondButtonLabel=\"취소\"\n          onClickSecondButton={() =>\n            isNewPlaylist\n              ? setIsNewPlaylist(false)\n              : setIsOpenPlaylistModal(false)\n          }\n          content={\n            <>\n              {!isNewPlaylist ? (\n                <PlaylistWrap>\n                  {playlists.map((playlist) => (\n                    <PlaylistRow\n                      key={`playlist-${playlist.id}`}\n                      id={playlist.id}\n                      title={playlist.name}\n                      count={playlist.total_count}\n                      onClick={async (id: number) => {\n                        await savePlaylist(id, checkedSongs.toString());\n                        const playlists = await getPlaylist();\n                        setPlaylists(playlists);\n                        setIsOpenPlaylistModal(false);\n                      }}\n                    />\n                  ))}\n                </PlaylistWrap>\n              ) : (\n                <StyledInput\n                  icon=\"edit\"\n                  placeholder=\"PLAYLIST 이름을 입력해주세요\"\n                  value={newPlaylistName}\n                  onChange={(e) => setNewPlaylistName(e.target.value)}\n                />\n              )}\n            </>\n          }\n        />\n      )}\n    </StyledServiceWrapper>\n  );\n};\n\nexport default Recent;\n\nconst StyledInput = styled(Input)`\n  margin-top: 36px;\n  html[color-mode='dark'] & {\n    background-color: #2e3137;\n  }\n`;\n\nconst StyledBottomContents = styled(BottomContentsScore)`\n  padding-top: 80px;\n\n  @media screen and (max-width: 960px) {\n    padding-top: 49px;\n  }\n\n  @media screen and (max-width: 360px) {\n    padding-top: 30px;\n  }\n`;\n"],"sourceRoot":""}